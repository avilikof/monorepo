FROM golang:1.21.7-bookworm as builder

# Set working directory to the service1 directory
WORKDIR /monorepo

# Copy go.mod and go.sum files to download dependencies
COPY ../apps/go/productivity_tool/occurrence_tracker/go.mod ./apps/go/productivity_tool/occurrence_tracker/go.mod
COPY ../apps/go/productivity_tool/occurrence_tracker/go.sum ./apps/go/productivity_tool/occurrence_tracker/go.sum
COPY ../apps/go/productivity_tool/occurrence_tracker/.env ./apps/go/productivity_tool/occurrence_tracker/.env


# Copy the service1 source code and lib1 modules
COPY ../apps/go/productivity_tool/occurrence_tracker ./apps/go/productivity_tool/occurrence_tracker
COPY ../libs/go ./libs/go

# Download dependencies
RUN cd ./apps/go/productivity_tool/occurrence_tracker && go mod tidy
RUN cd ./apps/go/productivity_tool/occurrence_tracker && go mod download

# Build the service1 binary
#RUN apk add build-base
#RUN apt install -y gcc
#RUN apt install -y bash
ENV CGO_ENABLED=1
RUN cd ./apps/go/productivity_tool/occurrence_tracker && go build -o occurrence_tracker

# Create a minimal image for the final stage
FROM golang:1.21.7-bookworm

# Set working directory
WORKDIR /app


# Copy the built binary from the builder stage
COPY --from=builder /monorepo/apps/go/productivity_tool/occurrence_tracker/occurrence_tracker .
COPY --from=builder /monorepo/apps/go/productivity_tool/occurrence_tracker/.env .

# Run the service when the container starts

CMD ["./occurrence_tracker"]
